{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lihongyu/Documents/Class/FALL_2020/COMP523/Code/Updated_code/herbMap_front/map-app/src/components/map.jsx\";\nimport React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport Slider from \"./slider\";\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\nimport { getColorFromTimesofAccess } from './functions_inuse.js';\nimport Data from './data';\n\nrequire('dotenv').config();\n\nconst Style = styled.div`\n    display: flex;\n    color: #888;\n    margin-top: 600px;\n    margin-left: 20px;\n`;\n_c = Style;\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      target_date: Date.parse('01/01/1900'),\n      viewport: {\n        width: \"100vw\",\n        height: \"90vh\",\n        latitude: 37.7577,\n        longitude: -122.4376,\n        zoom: 3\n      },\n      selectedPlant: null,\n      plants: [],\n      modified_plants: [],\n      yellow_plants: [],\n      blue_plants: [],\n      red_plants: [],\n      orange_plants: []\n    };\n\n    this.handleChangeTime = () => {\n      this.setState({\n        target_date: Date.parse('01/01/2019')\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        target_date: Date.parse('01/01/1900')\n      });\n    };\n\n    this.handleOnChange = e => {\n      console.log(e.target.value);\n      console.log(this.state.target_date);\n\n      if (e.target.value === 2015) {\n        this.setState({\n          target_date: Date.parse(\"01/01/2015\")\n        });\n      } else if (e.target.value === 2016) {\n        this.setState({\n          target_date: Date.parse(\"01/01/2016\")\n        });\n      } else if (e.target.value === 2017) {\n        this.setState({\n          target_date: Date.parse(\"01/01/2017\")\n        });\n      } else if (e.target.value === 2018) {\n        this.setState({\n          target_date: Date.parse(\"01/01/2018\")\n        });\n      } else if (e.target.value === 2019) {\n        this.setState({\n          target_date: Date.parse(\"01/01/2019\")\n        });\n      } else if (e.target.value === 2020) {\n        this.setState({\n          target_date: Date.parse(\"01/01/2020\")\n        });\n      }\n\n      console.log(this.state.target_date);\n    };\n  }\n\n  componentDidMount() {\n    var new_plants = [];\n    var yellow_plants = [];\n    var blue_plants = [];\n    var red_plants = [];\n    var orange_plants = [];\n    fetch(\"https://herbarium-map-server.herokuapp.com/herbarium\").then(response => response.json()).then(data => {\n      data.slice(0, 25).forEach(plant => {\n        var {\n          Access,\n          occid,\n          catalogNumber,\n          country,\n          stateProvince,\n          county,\n          decimalLatitude,\n          decimalLongitude\n        } = plant;\n        var sum_count = 0;\n        console.log(\"actal_target_date: \" + this.state.target_date);\n        var sum_count = 0;\n        Access.forEach(access => {\n          if (Date.parse(access.accessDate) > this.state.target_date) {\n            sum_count = sum_count + access.cnt;\n          }\n        }); //const counts = Access.map(calTimes, this.state.target_date)\n        // sum_count = counts.reduce(function(a, b){\n        //     return a + b;\n        // }, 0);\n\n        var color = getColorFromTimesofAccess(sum_count);\n        var modifited_plant = {\n          \"occis\": occid,\n          \"catalogNumber\": catalogNumber,\n          \"country\": country,\n          \"stateProvince\": stateProvince,\n          \"county\": county,\n          \"decimalLatitude\": decimalLatitude,\n          \"decimalLongitude\": decimalLongitude,\n          \"sum_count\": sum_count,\n          \"color\": color\n        };\n        new_plants.push(modifited_plant);\n      });\n      new_plants.forEach(plant => {\n        if (plant.color === \"yellow\") {\n          yellow_plants.push(plant);\n        } else if (plant.color === \"blue\") {\n          blue_plants.push(plant);\n        } else if (plant.color === \"red\") {\n          red_plants.push(plant);\n        } else if (plant.color === \"orange\") {\n          orange_plants.push(plant);\n        }\n      });\n      this.setState({\n        plants: data\n      });\n      this.setState({\n        modified_plants: new_plants\n      });\n      this.setState({\n        yellow_plants: yellow_plants\n      });\n      this.setState({\n        blue_plants: blue_plants\n      });\n      this.setState({\n        red_plants: red_plants\n      });\n      this.setState({\n        orange_plants: orange_plants\n      });\n    });\n  }\n\n  componentDidUpdate(pP, pS, sS) {\n    // console.log(pS.target_date)\n    var new_plants = [];\n    var yellow_plants = [];\n    var blue_plants = [];\n    var red_plants = [];\n    var orange_plants = [];\n\n    if (pS.target_date != this.state.target_date) {\n      this.state.plants.slice(0, 25).forEach(plant => {\n        var {\n          Access,\n          occid,\n          catalogNumber,\n          country,\n          stateProvince,\n          county,\n          decimalLatitude,\n          decimalLongitude\n        } = plant;\n        var sum_count = 0;\n        Access.forEach(access => {\n          if (Date.parse(access.accessDate) > this.state.target_date) {\n            sum_count = sum_count + access.cnt;\n          }\n        }); // const counts = Access.map(calTimes, this.state.target_date)\n        // sum_count = counts.reduce(function(a, b){\n        //     return a + b;\n        // }, 0);\n\n        var color = getColorFromTimesofAccess(sum_count);\n        var modifited_plant = {\n          \"occis\": occid,\n          \"catalogNumber\": catalogNumber,\n          \"country\": country,\n          \"stateProvince\": stateProvince,\n          \"county\": county,\n          \"decimalLatitude\": decimalLatitude,\n          \"decimalLongitude\": decimalLongitude,\n          \"sum_count\": sum_count,\n          \"color\": color\n        };\n        new_plants.push(modifited_plant);\n      });\n      new_plants.forEach(plant => {\n        if (plant.sum_count > 0) {\n          if (plant.color === \"yellow\") {\n            yellow_plants.push(plant);\n          } else if (plant.color === \"blue\") {\n            blue_plants.push(plant);\n          } else if (plant.color === \"red\") {\n            red_plants.push(plant);\n          } else if (plant.color === \"orange\") {\n            orange_plants.push(plant);\n          }\n        }\n      });\n      this.setState({\n        modified_plants: new_plants,\n        yellow_plants: yellow_plants,\n        blue_plants: blue_plants,\n        red_plants: red_plants,\n        orange_plants: orange_plants\n      });\n    }\n  }\n\n  render() {\n    // console.log(this.state.red_plants.length)\n    // console.log(this.state.modified_plants.length)\n    //console.log(this.state.target_date)\n    const {\n      selectedPlant\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ReactMapGL, { ...this.state.viewport,\n        mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n        onViewportChange: viewport => this.setState({\n          viewport\n        }),\n        children: [this.state.orange_plants.map(plant => /*#__PURE__*/_jsxDEV(Marker, {\n          latitude: plant.decimalLatitude,\n          longitude: plant.decimalLongitude,\n          color: plant.color,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"markers\",\n            color: plant.color,\n            onClick: () => {\n              this.setState({\n                selectedPlant: plant\n              });\n            },\n            style: {\n              weight: 0 + \"em\",\n              height: 0 + \"em\",\n              color: \"red\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pin1\",\n              style: {\n                color: \"orange\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 21\n          }, this)\n        }, plant.occid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)), this.state.yellow_plants.map(plant => /*#__PURE__*/_jsxDEV(Marker, {\n          latitude: plant.decimalLatitude,\n          longitude: plant.decimalLongitude,\n          color: plant.color,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"markers\",\n            color: plant.color,\n            onClick: () => {\n              this.setState({\n                selectedPlant: plant\n              });\n            },\n            style: {\n              weight: 0 + \"em\",\n              height: 0 + \"em\",\n              color: \"red\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pin1\",\n              style: {\n                color: \"yellow\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }, this)\n        }, plant.occid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)), this.state.blue_plants.map(plant => /*#__PURE__*/_jsxDEV(Marker, {\n          latitude: plant.decimalLatitude,\n          longitude: plant.decimalLongitude,\n          color: plant.color,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"markers\",\n            color: plant.color,\n            onClick: () => {\n              this.setState({\n                selectedPlant: plant\n              });\n            },\n            style: {\n              weight: 0 + \"em\",\n              height: 0 + \"em\",\n              color: \"red\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pin1\",\n              style: {\n                color: \"blue\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 21\n          }, this)\n        }, plant.occid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)), this.state.red_plants.map(plant => /*#__PURE__*/_jsxDEV(Marker, {\n          latitude: plant.decimalLatitude,\n          longitude: plant.decimalLongitude,\n          color: plant.color,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"markers\",\n            color: plant.color,\n            onClick: () => {\n              this.setState({\n                selectedPlant: plant\n              });\n            },\n            style: {\n              weight: 0 + \"em\",\n              height: 0 + \"em\",\n              color: \"red\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pin1\",\n              style: {\n                color: \"red\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 21\n          }, this)\n        }, plant.occid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this)), selectedPlant && /*#__PURE__*/_jsxDEV(Popup, {\n          latitude: selectedPlant.decimalLatitude,\n          longitude: selectedPlant.decimalLongitude,\n          closeButton: true,\n          closeOnClick: false,\n          onClose: () => this.setState({\n            selectedPlant: false\n          }),\n          anchor: \"top\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"occid: \", selectedPlant.occid, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"Catalog Number: \", selectedPlant.catalogNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [selectedPlant.county, \", \", selectedPlant.stateProvince, \", \", selectedPlant.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"Access Time: \", selectedPlant.sum_count]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleChangeTime,\n          className: \"btn-secondary btn-sm sm-2\",\n          children: \"Change Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleReset,\n          className: \"btn-secondary btn-sm sm-2\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Style, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: 2015,\n            max: 2020,\n            value: this.state.value,\n            className: \"slider\",\n            onChange: this.handleOnChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"value\",\n            children: this.state.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Style\");","map":{"version":3,"sources":["/Users/lihongyu/Documents/Class/FALL_2020/COMP523/Code/Updated_code/herbMap_front/map-app/src/components/map.jsx"],"names":["React","Component","styled","Slider","ReactMapGL","Marker","Popup","getColorFromTimesofAccess","Data","require","config","Style","div","Map","state","target_date","Date","parse","viewport","width","height","latitude","longitude","zoom","selectedPlant","plants","modified_plants","yellow_plants","blue_plants","red_plants","orange_plants","handleChangeTime","setState","handleReset","handleOnChange","e","console","log","target","value","componentDidMount","new_plants","fetch","then","response","json","data","slice","forEach","plant","Access","occid","catalogNumber","country","stateProvince","county","decimalLatitude","decimalLongitude","sum_count","access","accessDate","cnt","color","modifited_plant","push","componentDidUpdate","pP","pS","sS","render","process","env","REACT_APP_MAPBOX_TOKEN","map","weight"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport styled from \"styled-components\";\nimport Slider from \"./slider\";\nimport ReactMapGL, {Marker, Popup} from 'react-map-gl';\nimport {getColorFromTimesofAccess} from './functions_inuse.js';\n\nimport Data from './data';\nrequire('dotenv').config();\n\nconst Style = styled.div`\n    display: flex;\n    color: #888;\n    margin-top: 600px;\n    margin-left: 20px;\n`;\n\nclass Map extends Component {\n    state = { \n        target_date: Date.parse('01/01/1900'),\n        viewport: {\n            width: \"100vw\",\n            height: \"90vh\",\n            latitude: 37.7577,\n            longitude: -122.4376,\n            zoom: 3\n          },\n        selectedPlant: null,\n        plants: [],\n        modified_plants: [],\n        yellow_plants: [],\n        blue_plants: [],\n        red_plants: [],\n        orange_plants: []\n     }\n\n     componentDidMount() {\n        var new_plants = [];\n        var yellow_plants = []\n        var blue_plants = []\n        var red_plants = []\n        var orange_plants = []\n        fetch(\"https://herbarium-map-server.herokuapp.com/herbarium\")\n        .then((response) => response.json())\n        .then((data) => {\n            data.slice(0,25).forEach(plant => {\n                var { Access, occid, catalogNumber, country, stateProvince, county, decimalLatitude, decimalLongitude } = plant;\n                var sum_count = 0\n                console.log(\"actal_target_date: \" + this.state.target_date)\n                var sum_count = 0\n                Access.forEach(access => {\n                    if (Date.parse(access.accessDate) > this.state.target_date) {\n                        sum_count = sum_count+access.cnt;\n                    }\n                })\n                //const counts = Access.map(calTimes, this.state.target_date)\n                // sum_count = counts.reduce(function(a, b){\n                //     return a + b;\n                // }, 0);\n                var color = getColorFromTimesofAccess(sum_count);\n                var modifited_plant = {\n                    \"occis\": occid,\n                    \"catalogNumber\": catalogNumber,\n                    \"country\": country,\n                    \"stateProvince\": stateProvince,\n                    \"county\": county,\n                    \"decimalLatitude\": decimalLatitude,\n                    \"decimalLongitude\": decimalLongitude,\n                    \"sum_count\": sum_count,\n                    \"color\": color\n                }\n                new_plants.push(modifited_plant)\n            })\n            new_plants.forEach(plant => {\n                if (plant.color === \"yellow\") {\n                    yellow_plants.push(plant)\n                } else if (plant.color === \"blue\") {\n                    blue_plants.push(plant)\n                } else if (plant.color === \"red\") {\n                    red_plants.push(plant)\n                } else if (plant.color === \"orange\") {\n                    orange_plants.push(plant)\n                }\n            })\n            this.setState({plants: data})\n            this.setState({modified_plants: new_plants})  \n            this.setState({yellow_plants: yellow_plants}) \n            this.setState({blue_plants: blue_plants})\n            this.setState({red_plants: red_plants})\n            this.setState({orange_plants: orange_plants});\n        })\n     }\n\n     componentDidUpdate(pP, pS, sS) {\n        // console.log(pS.target_date)\n        var new_plants = [];\n        var yellow_plants = []\n        var blue_plants = []\n        var red_plants = []\n        var orange_plants = []\n        if (pS.target_date != this.state.target_date) {\n            this.state.plants.slice(0,25).forEach(plant => {\n                var { Access, occid, catalogNumber, country, stateProvince, county, decimalLatitude, decimalLongitude } = plant;\n                var sum_count = 0\n                Access.forEach(access => {\n                    if (Date.parse(access.accessDate) > this.state.target_date) {\n                        sum_count = sum_count+access.cnt;\n                    }\n                })\n                // const counts = Access.map(calTimes, this.state.target_date)\n                // sum_count = counts.reduce(function(a, b){\n                //     return a + b;\n                // }, 0);\n                var color = getColorFromTimesofAccess(sum_count);\n                var modifited_plant = {\n                    \"occis\": occid,\n                    \"catalogNumber\": catalogNumber,\n                    \"country\": country,\n                    \"stateProvince\": stateProvince,\n                    \"county\": county,\n                    \"decimalLatitude\": decimalLatitude,\n                    \"decimalLongitude\": decimalLongitude,\n                    \"sum_count\": sum_count,\n                    \"color\": color\n                }\n                new_plants.push(modifited_plant)\n            })\n            new_plants.forEach(plant => {\n                if (plant.sum_count > 0) {\n                    if (plant.color === \"yellow\") {\n                        yellow_plants.push(plant)\n                    } else if (plant.color === \"blue\") {\n                        blue_plants.push(plant)\n                    } else if (plant.color === \"red\") {\n                        red_plants.push(plant)\n                    } else if (plant.color === \"orange\") {\n                        orange_plants.push(plant)\n                    }\n                }\n            })\n            this.setState({modified_plants: new_plants, yellow_plants: yellow_plants, blue_plants: blue_plants, red_plants: red_plants, orange_plants: orange_plants});\n        }\n      }\n\n     handleChangeTime = () => {\n        this.setState({ target_date: Date.parse('01/01/2019')})\n     }\n\n     handleReset = () => {\n        this.setState({ target_date: Date.parse('01/01/1900')})\n     }\n\n     handleOnChange = (e) => {\n         console.log(e.target.value)\n         console.log(this.state.target_date)\n        if (e.target.value === 2015) {\n            this.setState({target_date: Date.parse(\"01/01/2015\")})\n        } else if (e.target.value === 2016) {\n            this.setState({target_date: Date.parse(\"01/01/2016\")})\n        } else if (e.target.value === 2017) {\n            this.setState({target_date: Date.parse(\"01/01/2017\")})\n        } else if (e.target.value === 2018) {\n            this.setState({target_date: Date.parse(\"01/01/2018\")})\n        } else if (e.target.value === 2019) {\n            this.setState({target_date: Date.parse(\"01/01/2019\")})\n        } else if (e.target.value === 2020) {\n            this.setState({target_date: Date.parse(\"01/01/2020\")})\n        }\n        console.log(this.state.target_date)\n    }\n\n    render() { \n        // console.log(this.state.red_plants.length)\n        // console.log(this.state.modified_plants.length)\n        //console.log(this.state.target_date)\n        const {selectedPlant} = this.state;\n        return (\n            <div>\n                <ReactMapGL\n                    {...this.state.viewport}\n                    mapboxApiAccessToken = {process.env.REACT_APP_MAPBOX_TOKEN}\n                    onViewportChange={(viewport) => this.setState({viewport})}\n                >\n                {this.state.orange_plants.map(plant => \n                    (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                            color = {plant.color}\n                    >   \n                    <button className=\"markers\" color = {plant.color} onClick={()=>{this.setState({selectedPlant: plant})}} style = {{weight: 0+\"em\", height:0+\"em\", color: \"red\"}}>\n                        <div className=\"pin1\" style = {{color: \"orange\"}}></div>\n                    </button>\n                    </Marker>\n                ))}\n                {this.state.yellow_plants.map(plant => \n                    (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                            color = {plant.color}\n                    >   \n                    <button className=\"markers\" color = {plant.color} onClick={()=>{this.setState({selectedPlant: plant})}} style = {{weight: 0+\"em\", height:0+\"em\", color: \"red\"}}>\n                        <div className=\"pin1\" style = {{color: \"yellow\"}}></div>\n                    </button>\n                    </Marker>\n                ))}\n                {this.state.blue_plants.map(plant => \n                    (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                            color = {plant.color}\n                    >   \n                    <button className=\"markers\" color = {plant.color} onClick={()=>{this.setState({selectedPlant: plant})}} style = {{weight: 0+\"em\", height:0+\"em\", color: \"red\"}}>\n                        <div className=\"pin1\" style = {{color: \"blue\"}}></div>\n                    </button>\n                    \n                    </Marker>\n                ))}\n                {this.state.red_plants.map(plant => \n                    (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                            color = {plant.color}\n                    >   \n                    <button className=\"markers\" color = {plant.color} onClick={()=>{this.setState({selectedPlant: plant})}} style = {{weight: 0+\"em\", height:0+\"em\", color: \"red\"}}>\n                        <div className=\"pin1\" style = {{color: \"red\"}}></div>\n                    </button>\n                    </Marker>\n                ))}\n\n                {selectedPlant && <Popup\n                        latitude={selectedPlant.decimalLatitude}\n                        longitude={selectedPlant.decimalLongitude}\n                        closeButton={true}\n                        closeOnClick={false}\n                        onClose={() => this.setState({selectedPlant: false})}\n                        anchor=\"top\" >\n                            <div>\n                                <h5>occid: {selectedPlant.occid} </h5>\n                                <h5>Catalog Number: {selectedPlant.catalogNumber}</h5>\n                                <h5>{selectedPlant.county}, {selectedPlant.stateProvince}, {selectedPlant.country}</h5>\n                                <h5>Access Time: {selectedPlant.sum_count}</h5>\n                            </div>\n                        </Popup>}\n                \n                <button onClick = {this.handleChangeTime} className=\"btn-secondary btn-sm sm-2\">Change Time</button>\n                <button onClick = {this.handleReset} className=\"btn-secondary btn-sm sm-2\">Reset</button>\n                <Style>\n                    <input type=\"range\" min={2015} max={2020} value={this.state.value} className=\"slider\" onChange={this.handleOnChange}/>\n                    <div className=\"value\">{this.state.value}</div>\n                </Style>\n                </ReactMapGL>\n                \n            </div>\n        )\n    }\n}\n \nexport default Map;"]},"metadata":{},"sourceType":"module"}