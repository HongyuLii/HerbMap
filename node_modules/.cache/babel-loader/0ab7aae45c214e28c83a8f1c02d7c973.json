{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lihongyu/Documents/Class/FALL_2020/COMP523/Code/Updated_code/herbMap_front/map-app/src/components/map.jsx\";\nimport React, { useState, Component } from 'react';\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\nimport { findTime, calCounts, calTimes, getColorFromTimesofAccess } from './functions_inuse.js';\nimport * as plantData from '../data/plants.json';\nimport Data from './data';\n\nrequire('dotenv').config();\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      target_date: Date.parse('01/01/1900'),\n      viewport: {\n        width: \"100vw\",\n        height: \"80vh\",\n        latitude: 37.7577,\n        longitude: -122.4376,\n        zoom: 3\n      },\n      selectedPlant: null,\n      plants: []\n    };\n\n    this.handleChangeTime = () => {\n      this.setState({\n        target_date: Date.parse('01/01/2019')\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        target_date: Date.parse('01/01/1900')\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://herbarium-map-server.herokuapp.com/herbarium\").then(response => response.json()).then(data => {\n      this.setState({\n        plants: data\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.plants);\n    const {\n      selectedPlant\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ReactMapGL, { ...this.state.viewport,\n        mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n        onViewportChange: viewport => this.setState({\n          viewport\n        }),\n        children: [this.state.plants.filter(plant => Date.parse(plant.accessDate) > this.state.target_date).map(plant => /*#__PURE__*/_jsxDEV(Marker, {\n          latitude: plant.decimalLatitude,\n          longitude: plant.decimalLongitude,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary btn-sm sm-2\",\n            onClick: () => {\n              this.setState({\n                selectedPlant: plant\n              });\n            },\n            children: \"Here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)\n        }, plant.occid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)), selectedPlant && /*#__PURE__*/_jsxDEV(Popup, {\n          latitude: selectedPlant.decimalLatitude,\n          longitude: selectedPlant.decimalLongitude,\n          closeButton: true,\n          closeOnClick: false,\n          onClose: () => this.setState({\n            selectedPlant: false\n          }),\n          anchor: \"top\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"occid: \", selectedPlant.occid, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"Catalog Number: \", selectedPlant.catalogNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [selectedPlant.county, \", \", selectedPlant.stateProvince, \", \", selectedPlant.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleChangeTime,\n        className: \"btn-secondary btn-sm sm-2\",\n        children: \"Change Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleReset,\n        className: \"btn-secondary btn-sm sm-2\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/lihongyu/Documents/Class/FALL_2020/COMP523/Code/Updated_code/herbMap_front/map-app/src/components/map.jsx"],"names":["React","useState","Component","ReactMapGL","Marker","Popup","findTime","calCounts","calTimes","getColorFromTimesofAccess","plantData","Data","require","config","Map","state","target_date","Date","parse","viewport","width","height","latitude","longitude","zoom","selectedPlant","plants","handleChangeTime","setState","handleReset","componentDidMount","fetch","then","response","json","data","render","console","log","process","env","REACT_APP_MAPBOX_TOKEN","filter","plant","accessDate","map","decimalLatitude","decimalLongitude","occid","catalogNumber","county","stateProvince","country"],"mappings":"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","sourcesContent":["import React, { useState, Component } from 'react';\nimport ReactMapGL, {Marker, Popup} from 'react-map-gl';\nimport {findTime, calCounts, calTimes, getColorFromTimesofAccess} from './functions_inuse.js';\nimport * as plantData from '../data/plants.json';\nimport Data from './data';\nrequire('dotenv').config();\n\nclass Map extends Component {\n    state = { \n        target_date: Date.parse('01/01/1900'),\n        viewport: {\n            width: \"100vw\",\n            height: \"80vh\",\n            latitude: 37.7577,\n            longitude: -122.4376,\n            zoom: 3\n          },\n        selectedPlant: null,\n        plants: []\n     }\n\n     componentDidMount() {\n        fetch(\"https://herbarium-map-server.herokuapp.com/herbarium\")\n        .then((response) => response.json())\n        .then((data) => {\n            this.setState({\n                plants: data\n            })\n        })\n     }\n\n     handleChangeTime = () => {\n         this.setState({ target_date: Date.parse('01/01/2019')})\n     }\n\n     handleReset = () => {\n        this.setState({ target_date: Date.parse('01/01/1900')})\n     }\n\n    render() { \n        console.log(this.state.plants)\n        const {selectedPlant} = this.state;\n        return (\n            <div>\n                <ReactMapGL\n                    {...this.state.viewport}\n                    mapboxApiAccessToken = {process.env.REACT_APP_MAPBOX_TOKEN}\n                    onViewportChange={(viewport) => this.setState({viewport})}\n                >\n\n                {/* {this.state.plants.slice(0,25).forEach(plant => {\n                    var { Access, occid, catalogNumber, country, stateProvince, county, decimalLatitude, decimalLongitude } = plant;\n                    var sum_count = 0\n                    const counts = Access.map(calTimes, this.state.target_date)\n                    sum_count = counts.reduce(function(a, b){\n                        return a + b;\n                    }, 0);\n                    <Marker key = {occid}\n                            latitude={decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                    >   \n                    <button className=\"btn-primary btn-sm sm-2\"\n                            onClick={()=>{this.setState({selectedPlant: plant})}}>Here</button>\n                    </Marker>\n                })} */}\n                \n                {this.state.plants.filter(plant=>Date.parse(plant.accessDate)>this.state.target_date).\n                map(plant => (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                    >   \n                    <button className=\"btn-primary btn-sm sm-2\"\n                            onClick={()=>{this.setState({selectedPlant: plant})}}>Here</button>\n                    </Marker>\n                ))}\n\n                {selectedPlant && <Popup\n                        latitude={selectedPlant.decimalLatitude}\n                        longitude={selectedPlant.decimalLongitude}\n                        closeButton={true}\n                        closeOnClick={false}\n                        onClose={() => this.setState({selectedPlant: false})}\n                        anchor=\"top\" >\n                            <div>\n                                <h5>occid: {selectedPlant.occid} </h5>\n                                <h5>Catalog Number: {selectedPlant.catalogNumber}</h5>\n                                <h5>{selectedPlant.county}, {selectedPlant.stateProvince}, {selectedPlant.country}</h5>\n                            </div>\n                        </Popup>}\n\n                </ReactMapGL>\n                <button onClick = {this.handleChangeTime} className=\"btn-secondary btn-sm sm-2\">Change Time</button>\n                <button onClick = {this.handleReset} className=\"btn-secondary btn-sm sm-2\">Reset</button>\n            </div>\n        )\n    }\n}\n \nexport default Map;"]},"metadata":{},"sourceType":"module"}