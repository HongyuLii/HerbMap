{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lihongyu/Documents/Class/FALL_2020/COMP523/Code/Updated_code/herbMap_front/map-app/src/components/map.jsx\";\nimport React, { useState, Component, useEffect } from 'react';\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\nimport { findTime, calCounts, calTimes, getColorFromTimesofAccess } from './functions_inuse.js';\nimport * as plantData from '../data/plants.json';\nimport Data from './data';\n\nrequire('dotenv').config();\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      target_date: Date.parse('01/01/1900'),\n      viewport: {\n        width: \"100vw\",\n        height: \"80vh\",\n        latitude: 37.7577,\n        longitude: -122.4376,\n        zoom: 3\n      },\n      selectedPlant: null,\n      plants: [],\n      modified_plants: [],\n      yellow_plants: [],\n      blue_plants: [],\n      red_plants: [],\n      orange_plants: []\n    };\n\n    this.handleChangeTime = () => {\n      this.setState({\n        target_date: Date.parse('01/01/2019')\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        target_date: Date.parse('01/01/1900')\n      });\n    };\n  }\n\n  componentDidMount() {\n    var new_plants = [];\n    fetch(\"https://herbarium-map-server.herokuapp.com/herbarium\").then(response => response.json()).then(data => {\n      data.slice(0, 25).forEach(plant => {\n        var {\n          Access,\n          occid,\n          catalogNumber,\n          country,\n          stateProvince,\n          county,\n          decimalLatitude,\n          decimalLongitude\n        } = plant;\n        var sum_count = 0;\n        const counts = Access.map(calTimes, this.state.target_date);\n        sum_count = counts.reduce(function (a, b) {\n          return a + b;\n        }, 0);\n        var color = getColorFromTimesofAccess(sum_count);\n        var modifited_plant = {\n          \"occis\": occid,\n          \"catalogNumber\": catalogNumber,\n          \"country\": country,\n          \"stateProvince\": stateProvince,\n          \"county\": county,\n          \"decimalLatitude\": decimalLatitude,\n          \"decimalLongitude\": decimalLongitude,\n          \"sum_count\": sum_count,\n          \"color\": color\n        };\n        new_plants.push(modifited_plant);\n      });\n    });\n    this.setState({\n      modified_plants: new_plants\n    });\n    console.log(this.state.modified_plants); // var yellow_plants = []\n    // var blue_plants = []\n    // var red_plants = []\n    // var orange_plants = []\n    // this.state.modified_plants.forEach(plant => {\n    //     if (plant.color === \"yellow\") {\n    //         yellow_plants.push(plant)\n    //     } else if (plant.color === \"blue\") {\n    //         blue_plants.push(plant)\n    //     } else if (plant.color === \"red\") {\n    //         red_plants.push(plant)\n    //     } else if (plant.color === \"orange\") {\n    //         orange_plants.push(plant)\n    //     }\n    // })\n    // this.setState({ yellow_plants: yellow_plants});\n    // this.setState({ blue_plants: blue_plants});\n    // this.setState({ red_plants: red_plants});\n    // this.setState({ orange_plants: orange_plants});\n  }\n\n  render() {\n    //console.log(this.state.modified_plants)\n    const {\n      selectedPlant\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ReactMapGL, { ...this.state.viewport,\n        mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n        onViewportChange: viewport => this.setState({\n          viewport\n        }),\n        children: selectedPlant && /*#__PURE__*/_jsxDEV(Popup, {\n          latitude: selectedPlant.decimalLatitude,\n          longitude: selectedPlant.decimalLongitude,\n          closeButton: true,\n          closeOnClick: false,\n          onClose: () => this.setState({\n            selectedPlant: false\n          }),\n          anchor: \"top\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"occid: \", selectedPlant.occid, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"Catalog Number: \", selectedPlant.catalogNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [selectedPlant.county, \", \", selectedPlant.stateProvince, \", \", selectedPlant.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleChangeTime,\n        className: \"btn-secondary btn-sm sm-2\",\n        children: \"Change Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleReset,\n        className: \"btn-secondary btn-sm sm-2\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/lihongyu/Documents/Class/FALL_2020/COMP523/Code/Updated_code/herbMap_front/map-app/src/components/map.jsx"],"names":["React","useState","Component","useEffect","ReactMapGL","Marker","Popup","findTime","calCounts","calTimes","getColorFromTimesofAccess","plantData","Data","require","config","Map","state","target_date","Date","parse","viewport","width","height","latitude","longitude","zoom","selectedPlant","plants","modified_plants","yellow_plants","blue_plants","red_plants","orange_plants","handleChangeTime","setState","handleReset","componentDidMount","new_plants","fetch","then","response","json","data","slice","forEach","plant","Access","occid","catalogNumber","country","stateProvince","county","decimalLatitude","decimalLongitude","sum_count","counts","map","reduce","a","b","color","modifited_plant","push","console","log","render","process","env","REACT_APP_MAPBOX_TOKEN"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,UAAP,IAAoBC,MAApB,EAA4BC,KAA5B,QAAwC,cAAxC;AACA,SAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,yBAAvC,QAAuE,sBAAvE;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,GAAN,SAAkBb,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBc,KADwB,GAChB;AACJC,MAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAW,YAAX,CADT;AAEJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,KAAK,EAAE,OADD;AAENC,QAAAA,MAAM,EAAE,MAFF;AAGNC,QAAAA,QAAQ,EAAE,OAHJ;AAINC,QAAAA,SAAS,EAAE,CAAC,QAJN;AAKNC,QAAAA,IAAI,EAAE;AALA,OAFN;AASJC,MAAAA,aAAa,EAAE,IATX;AAUJC,MAAAA,MAAM,EAAE,EAVJ;AAWJC,MAAAA,eAAe,EAAE,EAXb;AAYJC,MAAAA,aAAa,EAAE,EAZX;AAaJC,MAAAA,WAAW,EAAE,EAbT;AAcJC,MAAAA,UAAU,EAAE,EAdR;AAeJC,MAAAA,aAAa,EAAE;AAfX,KADgB;;AAAA,SAqEvBC,gBArEuB,GAqEJ,MAAM;AACrB,WAAKC,QAAL,CAAc;AAAEjB,QAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAW,YAAX;AAAf,OAAd;AACH,KAvEsB;;AAAA,SAyEvBgB,WAzEuB,GAyET,MAAM;AACjB,WAAKD,QAAL,CAAc;AAAEjB,QAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAW,YAAX;AAAf,OAAd;AACF,KA3EsB;AAAA;;AAmBvBiB,EAAAA,iBAAiB,GAAG;AACjB,QAAIC,UAAU,GAAG,EAAjB;AACAC,IAAAA,KAAK,CAAC,sDAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZA,MAAAA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAa,EAAb,EAAiBC,OAAjB,CAAyBC,KAAK,IAAI;AAC9B,YAAI;AAAEC,UAAAA,MAAF;AAAUC,UAAAA,KAAV;AAAiBC,UAAAA,aAAjB;AAAgCC,UAAAA,OAAhC;AAAyCC,UAAAA,aAAzC;AAAwDC,UAAAA,MAAxD;AAAgEC,UAAAA,eAAhE;AAAiFC,UAAAA;AAAjF,YAAsGR,KAA1G;AACA,YAAIS,SAAS,GAAG,CAAhB;AACA,cAAMC,MAAM,GAAGT,MAAM,CAACU,GAAP,CAAW/C,QAAX,EAAqB,KAAKO,KAAL,CAAWC,WAAhC,CAAf;AACAqC,QAAAA,SAAS,GAAGC,MAAM,CAACE,MAAP,CAAc,UAASC,CAAT,EAAYC,CAAZ,EAAc;AACpC,iBAAOD,CAAC,GAAGC,CAAX;AACH,SAFW,EAET,CAFS,CAAZ;AAGA,YAAIC,KAAK,GAAGlD,yBAAyB,CAAC4C,SAAD,CAArC;AACA,YAAIO,eAAe,GAAG;AAClB,mBAASd,KADS;AAElB,2BAAiBC,aAFC;AAGlB,qBAAWC,OAHO;AAIlB,2BAAiBC,aAJC;AAKlB,oBAAUC,MALQ;AAMlB,6BAAmBC,eAND;AAOlB,8BAAoBC,gBAPF;AAQlB,uBAAaC,SARK;AASlB,mBAASM;AATS,SAAtB;AAWAvB,QAAAA,UAAU,CAACyB,IAAX,CAAgBD,eAAhB;AACH,OApBD;AAqBH,KAxBD;AAyBA,SAAK3B,QAAL,CAAc;AAAEN,MAAAA,eAAe,EAAES;AAAnB,KAAd;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhD,KAAL,CAAWY,eAAvB,EA5BiB,CA6BjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;AAWFqC,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAACvC,MAAAA;AAAD,QAAkB,KAAKV,KAA7B;AACA,wBACI;AAAA,8BACI,QAAC,UAAD,OACQ,KAAKA,KAAL,CAAWI,QADnB;AAEI,QAAA,oBAAoB,EAAI8C,OAAO,CAACC,GAAR,CAAYC,sBAFxC;AAGI,QAAA,gBAAgB,EAAGhD,QAAD,IAAc,KAAKc,QAAL,CAAc;AAACd,UAAAA;AAAD,SAAd,CAHpC;AAAA,kBAyDCM,aAAa,iBAAI,QAAC,KAAD;AACV,UAAA,QAAQ,EAAEA,aAAa,CAAC0B,eADd;AAEV,UAAA,SAAS,EAAE1B,aAAa,CAAC2B,gBAFf;AAGV,UAAA,WAAW,EAAE,IAHH;AAIV,UAAA,YAAY,EAAE,KAJJ;AAKV,UAAA,OAAO,EAAE,MAAM,KAAKnB,QAAL,CAAc;AAACR,YAAAA,aAAa,EAAE;AAAhB,WAAd,CALL;AAMV,UAAA,MAAM,EAAC,KANG;AAAA,iCAON;AAAA,oCACI;AAAA,oCAAYA,aAAa,CAACqB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA,6CAAqBrB,aAAa,CAACsB,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA,yBAAKtB,aAAa,CAACyB,MAAnB,QAA6BzB,aAAa,CAACwB,aAA3C,QAA4DxB,aAAa,CAACuB,OAA1E;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAPM;AAAA;AAAA;AAAA;AAAA;AAzDlB;AAAA;AAAA;AAAA;AAAA,cADJ,eAyEI;AAAQ,QAAA,OAAO,EAAI,KAAKhB,gBAAxB;AAA0C,QAAA,SAAS,EAAC,2BAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzEJ,eA0EI;AAAQ,QAAA,OAAO,EAAI,KAAKE,WAAxB;AAAqC,QAAA,SAAS,EAAC,2BAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1EJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA8EH;;AA/JuB;;AAkK5B,eAAepB,GAAf","sourcesContent":["import React, { useState, Component, useEffect } from 'react';\nimport ReactMapGL, {Marker, Popup} from 'react-map-gl';\nimport {findTime, calCounts, calTimes, getColorFromTimesofAccess} from './functions_inuse.js';\nimport * as plantData from '../data/plants.json';\nimport Data from './data';\nrequire('dotenv').config();\n\nclass Map extends Component {\n    state = { \n        target_date: Date.parse('01/01/1900'),\n        viewport: {\n            width: \"100vw\",\n            height: \"80vh\",\n            latitude: 37.7577,\n            longitude: -122.4376,\n            zoom: 3\n          },\n        selectedPlant: null,\n        plants: [],\n        modified_plants: [],\n        yellow_plants: [],\n        blue_plants: [],\n        red_plants: [],\n        orange_plants: []\n     }\n\n     componentDidMount() {\n        var new_plants = [];\n        fetch(\"https://herbarium-map-server.herokuapp.com/herbarium\")\n        .then((response) => response.json())\n        .then((data) => {\n            data.slice(0,25).forEach(plant => {\n                var { Access, occid, catalogNumber, country, stateProvince, county, decimalLatitude, decimalLongitude } = plant;\n                var sum_count = 0\n                const counts = Access.map(calTimes, this.state.target_date)\n                sum_count = counts.reduce(function(a, b){\n                    return a + b;\n                }, 0);\n                var color = getColorFromTimesofAccess(sum_count);\n                var modifited_plant = {\n                    \"occis\": occid,\n                    \"catalogNumber\": catalogNumber,\n                    \"country\": country,\n                    \"stateProvince\": stateProvince,\n                    \"county\": county,\n                    \"decimalLatitude\": decimalLatitude,\n                    \"decimalLongitude\": decimalLongitude,\n                    \"sum_count\": sum_count,\n                    \"color\": color\n                }\n                new_plants.push(modifited_plant)\n            })\n        })\n        this.setState({ modified_plants: new_plants});\n        console.log(this.state.modified_plants);\n        // var yellow_plants = []\n        // var blue_plants = []\n        // var red_plants = []\n        // var orange_plants = []\n        // this.state.modified_plants.forEach(plant => {\n        //     if (plant.color === \"yellow\") {\n        //         yellow_plants.push(plant)\n        //     } else if (plant.color === \"blue\") {\n        //         blue_plants.push(plant)\n        //     } else if (plant.color === \"red\") {\n        //         red_plants.push(plant)\n        //     } else if (plant.color === \"orange\") {\n        //         orange_plants.push(plant)\n        //     }\n        // })\n        // this.setState({ yellow_plants: yellow_plants});\n        // this.setState({ blue_plants: blue_plants});\n        // this.setState({ red_plants: red_plants});\n        // this.setState({ orange_plants: orange_plants});\n     }\n\n     handleChangeTime = () => {\n         this.setState({ target_date: Date.parse('01/01/2019')})\n     }\n\n     handleReset = () => {\n        this.setState({ target_date: Date.parse('01/01/1900')})\n     }\n\n\n    render() { \n        //console.log(this.state.modified_plants)\n        const {selectedPlant} = this.state;\n        return (\n            <div>\n                <ReactMapGL\n                    {...this.state.viewport}\n                    mapboxApiAccessToken = {process.env.REACT_APP_MAPBOX_TOKEN}\n                    onViewportChange={(viewport) => this.setState({viewport})}\n                >\n                {/* {this.state.orange_plants.map(plant => \n                    (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                            color = {plant.color}\n                    >   \n                    <button className=\"markers\" color = {plant.color} onClick={()=>{this.setState({selectedPlant: plant})}} style = {{weight: 0+\"em\", height:0+\"em\", color: \"red\"}}>\n                        <div class=\"pin1\" style = {{color: \"orange\"}}></div>\n                    </button>\n                    </Marker>\n                ))} */}\n                {/* {this.state.yellow_plants.map(plant => \n                    (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                            color = {plant.color}\n                    >   \n                    <button className=\"markers\" color = {plant.color} onClick={()=>{this.setState({selectedPlant: plant})}} style = {{weight: 0+\"em\", height:0+\"em\", color: \"red\"}}>\n                        <div class=\"pin1\" style = {{color: \"yellow\"}}></div>\n                    </button>\n                    \n                    </Marker>\n                ))}\n                {this.state.blue_plants.map(plant => \n                    (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                            color = {plant.color}\n                    >   \n                    <button className=\"markers\" color = {plant.color} onClick={()=>{this.setState({selectedPlant: plant})}} style = {{weight: 0+\"em\", height:0+\"em\", color: \"red\"}}>\n                        <div class=\"pin1\" style = {{color: \"blue\"}}></div>\n                    </button>\n                    \n                    </Marker>\n                ))}\n                {this.state.red_plants.map(plant => \n                    (\n                    <Marker key = {plant.occid}\n                            latitude={plant.decimalLatitude}\n                            longitude={plant.decimalLongitude}\n                            color = {plant.color}\n                    >   \n                    <button className=\"markers\" color = {plant.color} onClick={()=>{this.setState({selectedPlant: plant})}} style = {{weight: 0+\"em\", height:0+\"em\", color: \"red\"}}>\n                        <div class=\"pin1\" style = {{color: \"red\"}}></div>\n                    </button>\n                    \n                    </Marker>\n                ))} */}\n\n                {selectedPlant && <Popup\n                        latitude={selectedPlant.decimalLatitude}\n                        longitude={selectedPlant.decimalLongitude}\n                        closeButton={true}\n                        closeOnClick={false}\n                        onClose={() => this.setState({selectedPlant: false})}\n                        anchor=\"top\" >\n                            <div>\n                                <h5>occid: {selectedPlant.occid} </h5>\n                                <h5>Catalog Number: {selectedPlant.catalogNumber}</h5>\n                                <h5>{selectedPlant.county}, {selectedPlant.stateProvince}, {selectedPlant.country}</h5>\n                            </div>\n                        </Popup>}\n\n                </ReactMapGL>\n                <button onClick = {this.handleChangeTime} className=\"btn-secondary btn-sm sm-2\">Change Time</button>\n                <button onClick = {this.handleReset} className=\"btn-secondary btn-sm sm-2\">Reset</button>\n            </div>\n        )\n    }\n}\n \nexport default Map;"]},"metadata":{},"sourceType":"module"}